
package Kinito;
import javax.microedition.midlet.*;
import javax.microedition.lcdui.*;
import java.util.Random;
import Kinito.About;
//import Kinito.KinitoCanvas;

public class Kinito extends MIDlet implements CommandListener {

	public Random dados;
	public Form formGeneral;
	public Form formPares;
	public Form formKinito;
	public Form formTirada;
	public List lstOptions;
	private int dado1, dado2;
	public int kino_intentos, kino_dados, kino_dado1, kino_dado2, kino_vasos;
    	public static final Command cmd_lev  = new Command("Levantar", Command.SCREEN, 1);
    	public static final Command cmd_levBeber  = new Command("Levantar y beber", Command.ITEM, 1);
    	public static final Command cmd_tirar  = new Command("Tirar", Command.ITEM, 2);
    	public static final Command cmdTaparPasar  = new Command("Tapar y pasarlo", Command.SCREEN, 2);
    	public static final Command cmdLevantar  = new Command("Levantar", Command.SCREEN, 1);
    	public static final Command cmdTirarAbelardo  = new Command("Tirar Abelardo", Command.SCREEN, 1);
    	public static final Command cmdAbout  = new Command("Acerca de", Command.HELP, 30);
    	public static final Command cmdKino  = new Command("Pasar kinito", Command.SCREEN, 1);
    	public static final Command cmdTiraKino  = new Command("Pasar kinito", Command.SCREEN, 1);
    	public static final Command cmdComenzar  = new Command("Jugar", Command.SCREEN, 1);

    /** The number of characters in numeric text field. */
    private static final int NUM_SIZE=5;

    /** Soft button for exiting the game. */
    private final Command exitCmd  = new Command("Salir", Command.EXIT, 2);

    /** Menu item for changing game levels. */
    private final Command cmdTirar = new Command("Tirar", Command.SCREEN, 1);

    private final StringItem label = new StringItem ("", "Pasas:", Item.BUTTON);

    /** A text field to keep the first argument. */
    private final TextField t1 = new TextField(null, "", NUM_SIZE,
            TextField.DECIMAL);

    /** A text field to keep the second argument. */
    private final TextField t2 = new TextField(null, "", NUM_SIZE,
            TextField.DECIMAL);

    /** A text field to keep the result of calculation. */
    private final TextField resultField = new TextField("Result", "", NUM_SIZE,
            TextField.UNEDITABLE);
    
    /** A choice group with available operations. */
    private final ChoiceGroup cg = new ChoiceGroup("", ChoiceGroup.POPUP,
            new String[] {"Tirar", "Levantar", "Pasar", "Pasar kinito"}, null);

    /** An alert to be reused for differemt errors. */
    private final Alert alert = new Alert("Error", "", null, AlertType.ERROR);

    /** Indicates if the application is initialized. */
    private boolean isInitialized = false;

    protected void startApp() {
	    try{
	        if (isInitialized) {
        	    return;
	        }
		splash_screen ();
	        isInitialized = true;
	    }
	    catch (java.io.IOException e){
		    System.out.println("ERROR: " + e.toString());
	    }
    }

    public void splash_screen () throws java.io.IOException
    {
	    Form frm = new Form ("xxx");
	    //System.out.println ("Width: " + frm.getWidth() + "\nHeight: " + frm.getHeight());
	    //Image img_tmp = //Image.create//Image ("/icons/splash.jpg");
	    //Image img = scaleFast//Image (img_tmp, frm.getWidth(), frm.getHeight());

	    Alert alt = new Alert ("Kinito 1.0", "", img, AlertType.CONFIRMATION);
	    alt.setTimeout (Alert.FOREVER);

	    alt.set//Image (img);
	    alt.addCommand (cmdComenzar);
	    alt.setCommandListener (this);
	    Display.getDisplay(this).setCurrent(alt);
    }

    protected void destroyApp(boolean unconditional) {}

    protected void pauseApp() {}

    public void commandAction(Command c, Displayable d) {
        if (c == exitCmd) {
            destroyApp(false);
            notifyDestroyed();
            return;
        }
	else if (c == cmdTirar){
		tirada ();
	}
	else if (c == cmd_tirar){
		tirada();
	}
	else if (c == cmd_lev){
	    mostrar_opciones ();
	}
	else if(c == cmd_levBeber){
		mostrar_opciones ();
	}
	else if (c == cmdTaparPasar){
		form_tapado ();
	}
	else if (c == cmdLevantar){
		form_levantado ();
	}
	else if (c == cmdTirarAbelardo){
		form_abelardo ();
	}
	else if (c == cmdAbout){
		About.showAbout(Display.getDisplay(this));
	}
	else if (c == cmdKino){ // Invocado desde mostrar_form_kino()
		tira_kino_player1(kino_dados);
	}
	else if (c == cmdTiraKino){ // Invocado desde mostrar_form_kino()
		tira_kino_player1(kino_dados);
	}
	else if (c == cmdComenzar){
		mostrar_form_tirada ();
	}
	
        //alert.setString( "SUX" );
        //Display.getDisplay(this).setCurrent(alert);

    }

    private int getNumber(TextField t, String type){

            alert.setString("No " + type + " Argument");
            Display.getDisplay(this).setCurrent(alert);
        return 0;
    }

    public void comienzo_juego ()
    {
    }
    
    
    public void mostrar_form_tirada ()
    {
	StringItem str = new StringItem (null, "Tira para jugar", Item.PLAIN);
	str.setFont(Font.getFont(Font.FACE_SYSTEM, Font.STYLE_BOLD, Font.SIZE_LARGE));

        formTirada = new Form("Es tu turno, ¡tira!");
        formTirada.append(str);
        formTirada.addCommand(cmdAbout);
        formTirada.addCommand(exitCmd);
        formTirada.addCommand(cmdTirar);
        formTirada.setCommandListener(this);
        Display.getDisplay(this).setCurrent(formTirada);
    }

    public void form_abelardo ()
    {
	String str = "Bebe el ";
	StringItem strItem = new StringItem (null, str, Item.PLAIN);
	strItem.setFont(Font.getFont(Font.FACE_SYSTEM, Font.STYLE_BOLD, Font.SIZE_LARGE));
	Form fAbelardo = new Form ("Tu tirada es");
	dados = new Random ();
	
	int iTemp=((dados.nextInt() % 9) + 1);
	// FIXME
	//str += iTemp.toString() + " ª/º";
	strItem.setText (str);
        fAbelardo.append(strItem);
        fAbelardo.addCommand(exitCmd);
        fAbelardo.addCommand(cmdTirar);
        fAbelardo.setCommandListener(this);
	Display.getDisplay(this).setCurrent(fAbelardo);
    }

    public void form_tapado ()
    {
	StringItem str = new StringItem (null, "Qué eliges, ¿Levantar o seguir jugando?", Item.PLAIN);
	str.setFont(Font.getFont(Font.FACE_SYSTEM, Font.STYLE_BOLD, Font.SIZE_LARGE));
	Form fTapado = new Form ("");

	str.setLayout (Item.LAYOUT_VEXPAND);
	fTapado.append (str);
	fTapado.addCommand (cmdTirar);
	fTapado.addCommand (cmdLevantar);
	fTapado.setCommandListener (this);
	Display.getDisplay(this).setCurrent (fTapado);

    }

    /*
     * Muestra los dados de la tirada anterior
     *
     * */
    public void form_levantado ()
    {
	    try{
		//String str = "La tirada anterior ha sido: ";
		//StringItem strItem = new StringItem (null, str, Item.PLAIN);
		//strItem.setFont(Font.getFont(Font.FACE_SYSTEM, Font.STYLE_BOLD, Font.SIZE_LARGE));
		Form fLevantado = new Form ("Has levantado");
		//str += "\n\nDado 1: " + dado1 + "\nDado 2: " + dado2 + "\n\n";
		//str += "Total: " + (dado1 + dado2) + "\n";
		
		//strItem.setText (str);
		//fLevantado.append (strItem);
		fLevantado.append (scaleFast//Image(get//Image(dado1, dado2), fLevantado.getWidth(), fLevantado.getHeight()/2));
		fLevantado.addCommand(cmdTirar);
		fLevantado.addCommand(exitCmd);
		fLevantado.setCommandListener(this);
		Display.getDisplay (this).setCurrent (fLevantado);
	    }
	    catch (java.io.IOException e){
		    System.out.println("ERROR Levantado: " + e.toString());
	    }
    }
    
    public void tira_kino_player1(int TiraDados)
    {
	    try{
		String mStr="";
		int suma=0;
		String str = "";
		StringItem strItem = new StringItem (null, str, Item.PLAIN);
		strItem.setFont(Font.getFont(Font.FACE_SYSTEM, Font.STYLE_BOLD, Font.SIZE_LARGE));
		Form fkino1 = new Form ("Kinito jugador 1");
		fkino1.addCommand (exitCmd);
		fkino1.addCommand (cmdTirar);
		
		dados = new Random ();
		int m1=0;
		int m2=0;
		if (TiraDados == 2){
			dado1 = (dados.nextInt () % 6) + 1;
			dado2 = (dados.nextInt () % 6 ) + 1;
		}
		else if (TiraDados == 1){
			dado1 = (dados.nextInt () % 9)+ 1;
		}
		kino_intentos += 1;
		
		if ((dado1 == 1 && dado2 == 2) 
				|| (dado1 == 2 && dado2 == 1)
				|| (dado1 == 5 && dado2 == 6)
				|| (dado1 == 6 && dado2 == 5)){
			str = "Dado 1: " + dado1 + "\nDado 2: " + dado2 + "\n\n";
			str += "PERFECTO!\n\nDevuélvele el kino y machácalo!!!\n\n";
			strItem.setText (str);
			fkino1.append (strItem);
			kino_intentos = 0;
			kino_vasos += 1;
		}
		else{
			if ((dado1 == dado2) || (dado2 == dado1)){
				kino_intentos -= 1;
			}
		
	
			if (kino_intentos < 3){
				str = "Dado1: " + dado1 + " \nDado2: " + dado2 + "\n\n";
				str += "Vas " + kino_intentos + " tiradas de 3\n\nVais " + kino_vasos + " acumulados";
				strItem.setText (str);
				fkino1.append (strItem);
			}
		}
		
		
		if (kino_intentos == 3){
			// FIXME: Hay que hacer el control de vasos correctamente
			// no esta basura!
			if (kino_vasos == 0) kino_vasos = 1;
			str = "Dado 1: " + dado1 + "\n" + "Dado 2: " + dado2 + "\n\n";
			str += "PERDISTE!\n\nBébete " + kino_vasos + " pedazo de vasos";
			strItem.setText (str);
			fkino1.append (strItem);
			kino_intentos = 0;
			kino_vasos = 1;
			
			//fkino1.setCommandListener (this);
			//Display.getDisplay (this).setCurrent(fkino1);
			//return null;
		}
	
		fkino1.addCommand (cmdTiraKino);
	
		
		
		fkino1.setCommandListener (this);
		Display.getDisplay (this).setCurrent(fkino1);
	}
	catch (Error ex){
		System.out.println ("Excepción!:\n" + ex.toString());
	}
    }
	
    public void opciones_kinito()
    {
	String str = "";
	StringItem strItem = new StringItem (null, str, Item.PLAIN);
	strItem.setFont(Font.getFont(Font.FACE_SYSTEM, Font.STYLE_BOLD, Font.SIZE_LARGE));
	Form fkino1 = new Form ("Kinito jugador 1");
	fkino1.append (strItem);
	fkino1.addCommand (exitCmd);
	fkino1.addCommand (cmdTiraKino);

	fkino1.setCommandListener (this);
	Display.getDisplay(this).setCurrent(fkino1);
    }

    public void tirar_pares ()
    {
    }

    /*
     * Función principal para procesar los datos de los dados, generar los
     * dados aleatoriamente,...
    */

    public void tirada ()
    {
	    try{
		int suma=0;
		String str = "¡1 y 3 Beben tres!";
		StringItem strItem = new StringItem (null, str, Item.PLAIN);
		strItem.setFont(Font.getFont(Font.FACE_SYSTEM, Font.STYLE_BOLD, Font.SIZE_LARGE));
		Form fTirada = new Form ("Tu tirada es");
		dados = new Random ();
	
		dado1 = (dados.nextInt () % 9) + 1;
		dado2 = (dados.nextInt () % 9) + 1;
		suma = dado1 + dado2;
		
		str = "Dado1: " + dado1 + "\n";
		str += "Dado2: " + dado2 + "\n\n";
	
		if (dado1 != dado2){
			str += "Total: " + suma + "\n\n";
		}
		else{
			if ((dado1 == 6 && dado2 == 6) || (dado2 == 6 && dado1 == 6)){
				str += "REGATAAAAAAAAAAAAAAAAAAAAA!";
			}
			else{
				str += "¡Tienes PAREJAS de " + dado1 + "!";
			}
		}
	
		//System.out.println("Dado1: " + dado1 + " - Dado2: " + dado2);
		if ((dado1 == 1 && dado2 == 2) 
				|| (dado1 == 2 && dado2 == 1)
				|| (dado1 == 5 && dado2 == 6)
				|| (dado1 == 6 && dado2 == 5))
		{
			str += "KINITOOOOO!!!!";
			strItem.setText (str);
			mostrar_form_kinito();
			return;
		}
		
		if ((dado1 == 1 && dado2 == 3) || (dado2 == 1 && dado1 == 3)){ // 1 y 3 beben tres
			str += "¡1 y 3 beben tres!";
		        fTirada.addCommand(cmdTirar);
		}
		else
		if ((dado1 == 1 && dado2 == 4) || (dado1 == 4 && dado2 == 1)){ // Abelardo
			str += "¡Abelardo!";
		        fTirada.addCommand(cmdTirarAbelardo);
		}
		else{
		        fTirada.addCommand(cmdTaparPasar);
		}
		//Image img = get//Image(dado1, dado2);
		int WidthDif = img.getWidth() - 10 - fTirada.getWidth();
		strItem.setText (str);
		//fTirada.append (scaleFast//Image(img, fTirada.getWidth() - 10, fTirada.getHeight()+WidthDif));
		fTirada.append (strItem);
		//fTirada.addCommand(exitCmd);
		
		fTirada.setCommandListener(this);
		Display.getDisplay (this).setCurrent (fTirada);
	
	    }
	    catch (java.io.IOException e){
		    System.out.println("ERROR Tirada: " + e.toString());
	    }

    }

    public void mostrar_form_pares ()
    {
        formPares = new Form("Tienes pares, ¿Qué hacemos?");
        formPares.append(t1);
        formPares.append(cg);
	formPares.append(t2);
        formPares.append(resultField);
        formPares.addCommand(exitCmd);
        formPares.addCommand(cmdTirar);
        formPares.setCommandListener(this);
        Display.getDisplay(this).setCurrent(formPares);
    }

    public void mostrar_form_kinito ()
    {
	StringItem strItem = new StringItem (null, "KINITO\n\n\nTienes 3 tiradas.\nPares repite tirada.\n", Item.PLAIN);
	strItem.setFont(Font.getFont(Font.FACE_SYSTEM, Font.STYLE_BOLD, Font.SIZE_LARGE));
	kino_dados = 2; // por defecto tiramos con los 2 dados
	kino_intentos = 0;
	kino_vasos=1;
        
	formKinito = new Form("Kinito! Suerte!");
	formKinito.append (strItem);
        formKinito.addCommand(cmdTirar);
        formKinito.addCommand(exitCmd);
        formKinito.addCommand(cmdKino);
        formKinito.setCommandListener(this);
        Display.getDisplay(this).setCurrent(formKinito);
    }

    public void mostrar_opciones ()
    {

	lstOptions = new List ("Selecciona tu opción", List.POPUP | List.TEXT_WRAP_ON);
	lstOptions.setSelectCommand (cmd_tirar);
	lstOptions.addCommand (cmd_lev);
	lstOptions.addCommand (cmd_levBeber);
	lstOptions.addCommand (cmd_tirar);
	lstOptions.setCommandListener (this);
	Display.getDisplay(this).setCurrent(lstOptions);
    }

    public int generar_numero_aleatorio ()
    {
	    return 1;
    }

    public //Image get//Image(int num1, int num2) throws java.io.IOException
    {
	    String str = "/themes/default/default_" + num1.toString() + num2.toString() + ".jpg";

	    // Esto nos permite ahorrar en imágenes, por ahora. Reducimos en la mitad el tamaño.
	    if ((num1 == 1 && num2 == 2) || 
			    (num1 == 1 && num2 == 3) ||
			    (num1 == 1 && num2 == 4) ||
			    (num1 == 1 && num2 == 5) ||
			    (num1 == 1 && num2 == 6)){
	    	str = "/themes/default/default_" + num2.toString() + num1.toString() + ".jpg";
		System.out.println ("Shift Dados: " + num1 + " - " + num2);
	    }
	    else if ((num1 == 2 && num2 == 3) || 
			    (num1 == 2 && num2 == 4) ||
			    (num1 == 2 && num2 == 5) ||
			    (num1 == 2 && num2 == 6)){
	    	str = "/themes/default/default_" + num2 + num1 + ".jpg";
		System.out.println ("Shift Dados: " + num1 + " - " + num2);
	    }
	    else if ((num1 == 3 && num2 == 4) || 
			    (num1 == 3 && num2 == 5) ||
			    (num1 == 3 && num2 == 6)){
	    	str = "/themes/default/default_" + num2 + num1 + ".jpg";
		System.out.println ("Shift Dados: " + num1 + " - " + num2);
	    }
	    else if ((num1 == 4 && num2 == 5) || 
			    (num1 == 4 && num2 == 6)){
	    	str = "/themes/default/default_" + num2 + num1 + ".jpg";
		System.out.println ("Shift Dados: " + num1 + " - " + num2);
	    }
	    else if ((num1 == 5 && num2 == 6)){
	    	str = "/themes/default/default_" + num2 + num1 + ".jpg";
		System.out.println ("Shift Dados: " + num1 + " - " + num2);
	    }
	    //Image img = //Image.create//Image (str) ;

	    if (img == null)
		    System.out.println ("NULLLLLLLLLLLLLLLLLLLL");
	    else
		    System.out.println (str);

	    return img;
    }


	// code taken from:
	// http://cvs.sourceforge.net/viewcvs.py/kobjects/utils4me/src/org/kobjects/lcdui/Scale//Image.java?rev=HEAD&content-type=text/vnd.viewcvs-markup

	public static //Image scaleFast//Image (//Image src, int dstW, int dstH) {
		int srcW = src.getWidth();
		int srcH = src.getHeight();
		
		//Image tmp = //Image.create//Image(dstW, srcH);
		Graphics g = tmp.getGraphics();
		
		int delta = (srcW << 16) / dstW;
		int pos = delta/2;
		
		for (int x = 0; x < dstW; x++) {
			g.setClip(x, 0, 1, srcH);
			g.draw//Image(src, x - (pos >> 16), 0, Graphics.LEFT | Graphics.TOP);
			pos += delta;
		}
		
		//Image dst = //Image.create//Image(dstW, dstH);
		g = dst.getGraphics();
		
		delta = (srcH << 16) / dstH;
		pos = delta/2;
		
		for (int y = 0; y < dstH; y++) {
			g.setClip(0, y, dstW, 1);
			g.drawImage(tmp, 0, y - (pos >> 16), Graphics.LEFT | Graphics.TOP);
			pos += delta;	
		}
		
		return dst;		
	}


}
